<?php
namespace App\Console\Commands; use Illuminate\Console\Command; use App\Models\User; use App\Models\Invoice; use App\Models\PaymentRate; use Illuminate\Support\Facades\Log;
class BackfillRegistrationInvoices extends Command { protected $signature='invoices:backfill-registration {--dry-run}'; protected $description='Generate missing registration invoices for approved users with a company';
    public function handle(){ $dry=$this->option('dry-run'); $count=0; $users=User::whereNotNull('approved_at')->get(); foreach($users as $user){ $company=$user->companies()->first(); if(!$company) continue; $exists=Invoice::where('user_id',$user->id)->where('type','registration')->exists(); if($exists) continue; $rate=PaymentRate::where('jenis',$company->jenis)->where('kualifikasi',$company->kualifikasi)->first(); $amount=$rate?->amount ?? 0; if($dry){ $this->line("[DRY] Would create invoice for user {$user->id} amount {$amount}"); continue; } try { Invoice::create(['number'=>Invoice::generateNumber(),'user_id'=>$user->id,'company_id'=>$company->id,'type'=>'registration','amount'=>$amount,'issued_date'=>today(),'due_date'=>today()->addDays(14),'status'=>'unpaid','meta'=>['company_name'=>$company->name,'jenis'=>$company->jenis,'kualifikasi'=>$company->kualifikasi]]); $count++; }catch(\Throwable $e){ Log::error('Backfill failed: '.$e->getMessage()); }} $this->info("Done. Created $count invoices." ); return self::SUCCESS; }
}
